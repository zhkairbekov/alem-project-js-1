export const mazes = {
    // Маленький, прямой
    maze1: [
        [0, 1, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0],
        [1, 1, 0, 1, 0],
        [0, 0, 0, 0, 0],
    ],

    // Средний с зацикленными маршрутами
    maze2: [
        [0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 1, 0, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    ],

    // maze21: [
    //     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    //     [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1],
    //     [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    //     [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    //     [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    //     [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    //     [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    //     [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    //     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    // ],

    // 15×15, сложный
    maze3: [
        [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],

    // 20×20, более реалистичный
    maze4: Array.from({ length: 20 }, (_, y) =>
        Array.from({ length: 20 }, (_, x) =>
            (x + y + Math.floor(Math.random() * 4)) % 4 === 0 ? 1 : 0
        )
    ),
   

    // 30×30, лабиринт с узким проходом
    maze5: (() => {
        const maze = Array.from({ length: 30 }, () => Array(30).fill(1));
        for (let i = 0; i < 30; i++) {
            maze[i][Math.floor(i / 2)] = 0;
        }
        return maze;
    })(),

    // Кольцевой лабиринт
    maze6: (() => {
        const size = 15;
        const maze = Array.from({ length: size }, () => Array(size).fill(1));
        for (let i = 1; i < size - 1; i++) {
            maze[1][i] = 0;
            maze[size - 2][i] = 0;
            maze[i][1] = 0;
            maze[i][size - 2] = 0;
        }
        maze[Math.floor(size / 2)][Math.floor(size / 2)] = 0;
        return maze;
    })(),

    // maze7 — maze20: сгенерированные случайные
    ...Object.fromEntries(
        Array.from({ length: 14 }, (_, i) => {
            const w = 12 + (i % 4) * 4; // ширина: 12–24
            const h = 8 + ((i + 1) % 3) * 4; // высота: 8–16
            const grid = Array.from({ length: h }, () =>
                Array.from({ length: w }, () => (Math.random() < 0.3 ? 1 : 0))
            );
            // гарантируем вход и выход
            grid[0][0] = 0;
            grid[h - 1][w - 1] = 0;
            return [`maze${7 + i}`, grid];
        })
    )
};